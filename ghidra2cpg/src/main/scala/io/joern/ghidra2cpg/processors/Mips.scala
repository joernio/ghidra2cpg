package io.joern.ghidra2cpg.processors
import scala.collection.immutable._

class Mips extends Processor {
  override def getInstructions: HashMap[String, String] =
    HashMap(
      "_add.D"  -> "<operator>.incBy",
      "_addiu"  -> "<operator>.incBy",
      "_addiu"  -> "<operator>.incBy",
      "_addu"   -> "<operator>.incBy",
      "_addu"   -> "<operator>.incBy",
      "_and"    -> "<operator>.and",
      "_andi"   -> "<operation>.and",
      "_clear"  -> "<operator>.assignment",
      "_lbu"    -> "<operator>.assignment",
      "_lhu"    -> "<operator>.assignment",
      "_li"     -> "<operator>.assignment",
      "_lui"    -> "<operator>.assignment",
      "_lw"     -> "<operator>.assignment",
      "_mov.D"  -> "<operator>.assignment",
      "_mov.S"  -> "<operator>.assignment",
      "_move"   -> "<operator>.assignment",
      "_move"   -> "<operator>.assignment",
      "_move"   -> "<operator>.assignment",
      "_movf"   -> "<operator>.assignment",
      "_movf.D" -> "<operator>.assignment",
      "_movn"   -> "<operator>.assignment",
      "_movn.D" -> "<operator>.assignment",
      "_movt.D" -> "<operator>.assignment",
      "_movz"   -> "<operator>.assignment",
      "_nop"    -> "<operator>.NOP",
      "_or"     -> "<operator>.or",
      "_rotr"   -> "<operator>.assignmentArithmeticShiftRight",
      "_sb"     -> "<operator>.assignment",
      "_sh"     -> "<operator>.assignment",
      "_sll"    -> "<operator>.assignment",
      "_slti"   -> "<operator>.assignment",
      "_sltiu"  -> "<operator>.assignment",
      "_sltu"   -> "<operator>.assignment",
      "_sub.D"  -> "<operator>.decBy",
      "_subu"   -> "<operator>.assignment",
      "_subu"   -> "<operator>.decBy",
      "_sw"     -> "<operator>.assignment",
      "add"     -> "<operator>.incBy",
      "add.D"   -> "<operator>.incBy",
      "add.S"   -> "<operator>.incBy",
      "addi"    -> "<operator>.incBy",
      "addiu"   -> "<operator>.incBy",
      "addiu"   -> "<operator>.incBy",
      "addu"    -> "<operator>.incBy",
      "addu"    -> "<operator>.incBy",
      "and"     -> "<operator>.and",
      "andi"    -> "<operator>.and",
      "b"       -> "<operator>.goto",
      "bal"     -> "CALL",
      "beq"     -> "<operator>.goto",
      "beql"    -> "<operator>.goto",
      "bgez"    -> "<operator>.goto",
      "bgezl"   -> "<operator>.goto",
      "bne"     -> "<operator>.goto",
      "bnel"    -> "<operator>.goto",
      "clear"   -> "<operator>.clear",
      "ext"     -> "<operator>.assignment",
      "j"       -> "<operator>.goto",
      "jal"     -> "CALL",
      "jalr"    -> "CALL",
      "jr"      -> "RETURN",
      "lb"      -> "<operator>.assignment",
      "lbu"     -> "<operator>.assignment",
      "lhu"     -> "<operator>.assignment",
      "li"      -> "<operator>.assignment",
      "lui"     -> "<operator>.assignment",
      "lw"      -> "<operator>.assignment",
      "lwl"     -> "<operator>.assignment",
      "lwr"     -> "<operator>.assignment",
      "move"    -> "<operator>.assignment",
      "movz"    -> "<operator>.assignment",
      "nop"     -> "<operator>.NOP",
      "or"      -> "<operator>.or",
      "ori"     -> "<operator>.or",
      "rotr"    -> "<operator>.assignmentArithmeticShiftRight",
      "sb"      -> "<operator>.assignment",
      "seh"     -> "<operator>.assignment",
      "sh"      -> "<operator>.assignment",
      "sll"     -> "<operator>.assignment",
      "sllv"    -> "<operator>.assignment",
      "slt"     -> "<operator>.assignment",
      "slti"    -> "<operator>.assignment",
      "sltiu"   -> "<operator>.assignment",
      "sltu"    -> "<operator>.assignment",
      "sra"     -> "<operator>.assignment",
      "srl"     -> "<operator>.assignment",
      "sub.D"   -> "<operator>.decBy",
      "sub.S"   -> "<operator>.decBy",
      "subu"    -> "<operator>.assignment",
      "subu"    -> "<operator>.decBy",
      "sw"      -> "<operator>.assignment",
      "wsbh"    -> "<operator>.assignment",
      "xor"     -> "<operator>.assignmentXor",
      "xori"    -> "<operator>.assignmentXor"
    )
}
